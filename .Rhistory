tau <- sapply(1:K, function(num_k) rinvgamma(1, shape=(num_of_ones_vars[num_k]+q+g_k)/2, scale=(h_k + (theta_k[[num_k]] %*% BR_k[[num_k]] %*% theta_k[[num_k]]))/2))
print('9')
# =================================================================
# ========================= Draw omega =========================== #
MH_omega <- function(proposed_omega, current_omega){
proposed_solve<-lapply(1:K, function(num_k) tau[num_k]*solve(XXi_k[[num_k]]+proposed_omega*diag(sum(gamma[num_k,,])+q)))
proposed_solve<-lapply(proposed_solve, function(x) (t(x)+x)/2)
current_solve<-lapply(1:K, function(num_k) tau[num_k]*solve(XXi_k[[num_k]]+current_omega*diag(sum(gamma[num_k,,])+q)))
current_solve<-lapply(current_solve, function(x) (t(x)+x)/2)
proposed <- sum(sapply(1:K, function(num_k) dmvnorm(theta_k[[num_k]], mean = rep(0,sum(gamma[num_k,,])+q), sigma = proposed_solve[[num_k]], log = T))) + dtnorm(current_omega,a=0,b=1,mean=proposed_omega, sd=sd_of_omega,log=T)
current <- sum(sapply(1:K, function(num_k) dmvnorm(theta_k[[num_k]], mean = rep(0,sum(gamma[num_k,,])+q), sigma = current_solve[[num_k]], log = T)))+ dtnorm(proposed_omega,a=0,b=1,mean=current_omega, sd=sd_of_omega,log=T)
prob <- exp(proposed-current)
if(prob>=1){return(proposed_omega)}else{
u<-runif(1) ; if(u<=prob){return(proposed_omega)}else{return(current_omega)}}
}
proposed_omega <- rtnorm(1,a=0,b=1,mean=w, sd=sd_of_omega)
print(proposed_omega)
w <- MH_omega(proposed_omega, w)
print(w)
print('10')
# ==========================================================#
# ========================= Draw bi ============================ #
for_bi <- function(num_sbj){
response <- Li[ID==num_sbj]
the_cluster <- Clusters[num_sbj]
mean_bi <- Psi %*% t(Z_sbj[[num_sbj]]) %*% InvAdj[[num_sbj]] %*% (response - C_star_sbj[[num_sbj]] %*% theta_k[[the_cluster]])
var_bi <- Psi - Psi %*% t(Z_sbj[[num_sbj]]) %*% InvAdj[[num_sbj]] %*% Z_sbj[[num_sbj]] %*% Psi
return(mvrnorm(1, mu=mean_bi,Sigma=var_bi))
}
bi <- lapply(1:NSbj, function(num_sbj) for_bi(num_sbj))
# ===============================================================
print('11')
# # ======================== Draw Psi ============================
MH_Psi <- function(proposed_Psi, current_Psi){
p_Adj_sbj <- lapply(1:NSbj, function(num_sbj) diag(CountSbj[num_sbj]) + Z_sbj[[num_sbj]] %*% proposed_Psi %*%t(Z_sbj[[num_sbj]]))
p_Adj_sbj <- lapply(p_Adj_sbj, function(x) (t(x)+x)/2)
p_InvAdj <- lapply(1:NSbj, function(num_sbj) solve(p_Adj_sbj[[num_sbj]]))
p_InvAdj <- lapply(p_InvAdj, function(x) (t(x)+x)/2)
p_cumbersome_quant <- Generate_CSbj_XXi_Xi(W_star_sbj, p_InvAdj)
p_XXi_k <- p_cumbersome_quant[[2]]
p_XXi_k <- lapply(1:K, function(num_k) if(num_k %in% active){return((t(p_XXi_k[[num_k]])+p_XXi_k[[num_k]])/2)}else{return(0)})
p_BR_k <- lapply(1:K, function(num_k) if(num_k %in% active){return(p_XXi_k[[num_k]]+w*diag(nrow(p_XXi_k[[num_k]])))}else{return(w*diag(sum(gamma[num_k,,])+q))})
p_R_k <- lapply(p_BR_k, function(x) solve(x))
proposed_solve<-lapply(1:K, function(num_k) tau[num_k]*p_R_k[[num_k]])
proposed_solve<-lapply(proposed_solve, function(x) (t(x)+x)/2)
current_solve<-lapply(1:K, function(num_k) tau[num_k]*R_k[[num_k]])
current_solve<-lapply(current_solve, function(x) (t(x)+x)/2)
proposed <- sum(sapply(1:K, function(num_k) dmvnorm(theta_k[[num_k]], mean = rep(0,sum(gamma[num_k,,])+q), sigma = proposed_solve[[num_k]], log = T)))
current <- sum(sapply(1:K, function(num_k) dmvnorm(theta_k[[num_k]], mean = rep(0,sum(gamma[num_k,,])+q), sigma = current_solve[[num_k]], log = T)))
prob <- exp(proposed-current)
if(prob>=1){return(proposed_Psi)}else{
u<-runif(1) ; if(u<=prob){return(proposed_Psi)}else{return(current_Psi)}}
}
bi_mats <- lapply(bi, function(b) b %*% t(b))
proposed_Psi <- riwish(pu+NSbj, D+Reduce('+', bi_mats))
Psi <- MH_Psi(proposed_Psi, Psi)
# ===============================================================#
print('12')
# ======================== Draw Li =============================#
for_Li <- function(num_sbj){
temp_Li <- Li[ID==num_sbj] ;  temp_Y <- Y[ID==num_sbj] ; len_Li <- length(temp_Li)
the_cluster <- Clusters[num_sbj]
mean_ <- C_star_sbj[[num_sbj]] %*% theta_k[[the_cluster]] + Z_sbj[[num_sbj]]%*%bi[[num_sbj]]
for_truncated<-function(j_loc){
mean__ <- mean_[j_loc]
if(temp_Y[j_loc]==1){return(rtnorm(1, a=0, mean = mean__, sd = 1))}else{
return(rtnorm(1, b=0, mean=mean__, sd=1))
}
}
return(sapply(1:len_Li, function(j_loc) for_truncated(j_loc)))
}
Li <- unlist(lapply(1:NSbj, function(num_sbj) for_Li(num_sbj)))
print('13')
# ========================= Draw clusters ====================== #
# C_star_sbj, Diri_p, Adj_sbj, Li
for_clusters <- function(num_sbj, gamma){
response <- Li[ID==num_sbj]
subjects_clusteres <- Generate_Specific_CSbj_by_clusters(num_sbj, gamma)
the_Z <- Z_sbj[[num_sbj]] ; the_bi <- bi[[num_sbj]]
# When null clusters occur??
K_probs <- sapply(1:K, function(num_k) dmvnorm(response, subjects_clusteres[[num_k]] %*% theta_k[[num_k]] + the_Z %*% the_bi, diag(CountSbj[num_sbj]),log=T))
log_Diri <- log(Diri_p) ; post_probs <- K_probs + log_Diri ; post_probs <- exp(post_probs-max(post_probs))
const <- sum(post_probs) ; post_probs <- post_probs/const
value<-which(rmultinom(1, 1, prob=post_probs)==1)
return(value)
}
Clusters <- sapply(1:NSbj, function(num_sbj) for_clusters(num_sbj, gamma))
print('14')
# ==============================================================
cat('Clusters:',table(Clusters),'\n')
# ============================================================= #
print(paste(iter,'is done'))
# ======================= store variables ======================#
if(iter%%2==0){
updated_gamma<-list.append(updated_gamma, gamma)
updated_cluster<-list.append(updated_cluster, Clusters)
updated_theta<-list.append(updated_theta, theta_k)
updated_bi <- list.append(updated_bi, bi)
updated_lambda<-append(updated_lambda, lambda)
updated_tau<-list.append(updated_tau, tau)
updated_nu<-append(updated_nu, nu)
updated_Psi <- list.append(updated_Psi, Psi)
updated_v <- list.append(updated_v, v)
updated_Li <- list.append(updated_Li, Li)
updated_w <- append(updated_w, w)
}
# Update jumping size?
# if(iter %% 100==0){
#   sd_of_nu <- sd(updated_nu[1:length(updated_nu)])
#   sd_of_lambda <- sd(updated_lambda[1:length(updated_nu)])
#   sd_of_omega <- sd(updated_w[1:length(updated_nu)])
#
#   print(paste('Updated sd of nu:', sd_of_nu))
#   print(paste('Updated sd of lambda:', sd_of_lambda))
#   print(paste('Updated sd of omega:', sd_of_omega))
#   update_indi <- update_indi+1
# }
# out plot!
if(iter%%1000==0){
end <- length(updated_theta)
start <- end - round(end/2)
timedomain <- seq(min(t),max(t),l=100)
knots <- seq(from=min(t), to=max(t), l=(candits+2))[2:(candits+1)]
sdd <- sd(t)
fixed_effects <- list()
time_v_effects <- list()
print('plot0')
for(i in 1:end){
res <- Divide_effects(updated_theta[[i]], 2)
fixed_effects[[i]] <- res$fixed_effects
time_v_effects[[i]] <- res$time_varying
}
print('plot1')
# time_v_effect
varying_arr <- list()
for(idx in 1:end){
varying_arr[[idx]] <- lapply(timedomain, function(x) get_time_varying_coeff(x, knots, sdd, updated_gamma[[idx]], time_v_effects[[idx]]))
}
fixed_arr <- array(0,dim=c(end,5,2))
for( i in 1:end){
fixed_arr[i,,]<-fixed_effects[[i]]
}
for( i in 1:5){
for( j in 1:2){
ci <- quantile(fixed_arr[,i,j][start:end],c(0.025,0.975))
print(paste(i,'and',j,'95% Ci of fixed',ci))
}
}
print('plot2')
graphics.off()
par(mfcol=c(2,5))
for( j in 1:2){
for( i in 1:5){
# j means coefficients and i means clusters
varying_df<-do.call(rbind, lapply(varying_arr, function(x) unlist(lapply(x, function(y) y[j,i]))))
varying_df<-varying_df[start:end,]
varying_df_UL <- apply(varying_df, 2, function(x) quantile(x,c(0.25, 0.5, 0.975)))
poly_range <- c(timedomain, rev(timedomain))
poly_coef_UL <- c(varying_df_UL[1,], rev(varying_df_UL[3,]))
plot(NULL,type="l",ylim=c(min(varying_df_UL[1,]),max(varying_df_UL[3,])),xlim=range(timedomain), xlab="",ylab="")
polygon(poly_range, poly_coef_UL,col=gray(0:9/9)[8],border=F)
lines(timedomain,varying_df_UL[2,],lty=1)
mtext(paste0('cluster',i,';varying',j),side=2,line=2.3,cex=0.9)
mtext("t",side=1,line=2.3,cex=0.9)
}
}
}
}},
error=function(e) cat('error',conditionMessage(e),'\n'),
warning=function(w) cat('warning',conditionMessage(w),'\n')
)# tryCatch.
return(list(gamma=updated_gamma,
Cluster=updated_cluster,
theta=updated_theta,
bi=updated_bi,
lambda=updated_lambda,
tau=updated_tau,
nu=updated_nu,
Psi=updated_Psi,
v=updated_v,
Li=updated_Li,
w=updated_w))
}
## K=2, p=2 ??????
## ?? ???·? �� ?? ???��???.
# setwd('C:\\Users\\wlsdnjsbu777\\Desktop\\00.MixPLM\\simulation data ????\\20181208')
data<-read.csv('dataset_1208.csv',header=T)
ID <- data$ID
W <- data[c('W1','W2')]
X <- data[c('X1','X2')]
Z <- data[c('Z1','Z2')]
t <- data$U1
Y <- data$Y
KKN <- 30
t1<-Sys.time()
ModelFit<-Mix_BL2(ID, Y, W, X, Z, K=5, t=t, candits=KKN, num_iters = 10000)
t2<-Sys.time()
t2-t1
# list.save(ModelFit,'ModelFit(N=600)_2.rdata')
ModelFit
ModelFit$w
ts.plot(ModelFit$w)
ModelFit$gamma
ModelFit$gamma[1,,]
ModelFit$gamma[1,,]
ModelFit$gamma[,,1]
ModelFit$gamma[[1]
ModelFit$gamma[[1]]
ModelFit$gamma[[100]]
ModelFit$gamma[[1000]]
ModelFit$gamma[1000,1,2]
rinvgamma(n=K, shape=g_k/2, scale=h_k/2)
lapply(modelFit$gamma,function(x) x[,2,1])
lapply(ModelFit$gamma,function(x) x[,2,1])
ModelFit$gamma
lapply(ModelFit$gamma,function(x) x[2,1,])
lapply(ModelFit$gamma,function(x) x[2,1,])
aaa=lapply(ModelFit$gamma,function(x) x[2,1,])
aaa
unlist(aaa)
aaa
aaa[[1]]
length(aaa[[1]])
unlist(aaa)
matrix(unlist(aaa),nrow=32,byrow=T)
AAA=matrix(unlist(aaa),nrow=32,byrow=T)
head(AAA)
aaa
unlist(aaa)
matrix(unlist(aaa),nrow=32)
matrix(unlist(aaa),nrow=32)[1,1]
matrix(unlist(aaa),nrow=32)[1,1]
matrix(unlist(aaa),nrow=32)[1,1]
matrix(unlist(aaa),nrow=32)[1,15]
matrix(unlist(aaa),nrow=32)[1:15]
as.matrix(unlist(aaa),nrow=32)[1:15]
as.matrix(unlist(aaa),nrow=32)[1:15,]
matrix(unlist(aaa),nrow=32)[1:15,1:2]
matrix(unlist(aaa),nrow=32,byrow=T)
AAA=matrix(unlist(aaa),nrow=32,byrow=T)
A
AAA=matrix(unlist(aaa),nrow=32,byrow=T)
AAA
AAA[1:32,1:4]
AAA[1:32,1:32]
AAA[1:32,1:33]
colMeans(AAA)
rowMeans(AAA)
ts.plot(rowMeans(AAA))
AAA[1:2,1:32]
aaa[[1:2]]
aaa[[1,2]]
aaa[[1]]
aaa[[2]]
aaa[[2]]
AAA=matrix(unlist(aaa),nrow=32,byrow=F)
AAA[1:2,1:32]
AAA=matrix(unlist(aaa),nrow=32,byrow=T)
aaa[1:3]
length(aaa)
head(unlist(aaa))
head(unlist(aaa),64)
head(AAA)
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(rowMeans(AAA))
ts.plot(colMeans(AAA))
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[1:2,1:32]
aaa[1:3]
aaa[500]
AAA[500,1:32]
ts.plot(colMeans(AAA))
ModelFit
aaa=lapply(ModelFit$gamma,function(x) x[4,1,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500,1:32]
aaa[500]
aaa=lapply(ModelFit$gamma,function(x) x[4,1,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500,1:32]
aaa[500]
aaa=lapply(ModelFit$gamma,function(x) x[5,1,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500,1:32]
aaa[500]
aaa=lapply(ModelFit$gamma,function(x) x[4,2,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500,1:32]
aaa[500]
aaa=lapply(ModelFit$gamma,function(x) x[5,2,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500,1:32]
aaa[500]
aaa[500:505]
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[4,2,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[2,2,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[2,2,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[2,1,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[2,3,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[1,1,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[2,1,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[3,1,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[4,1,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[5,1,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[6,1,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa
aaa
ModelFit$gamma
aaa=lapply(ModelFit$gamma,function(x) x[1,1,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[2,1,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[2,1,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[2,1,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[2,1,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[2,2,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[2,3,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[2,4,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[2,5,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[2,6,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[2,5,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[2,5,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[2,1,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
ts.plot(colMeans(AAA))
AAA[500:505,1:32]
aaa[500:505]
ModelFit$gamma[[1]]
ModelFit$gamma[[1]][2,1,]
ModelFit$gamma[[1]][2,5,]
ModelFit$gamma[[1]][2,1,]
ModelFit$gamma[[1]][3,1,]
plot(colMeans(AAA),type="h")
aaa=lapply(ModelFit$gamma,function(x) x[1,1,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
plot(colMeans(AAA),type="h")
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[2,1,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
plot(colMeans(AAA),type="h")
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[3,1,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
plot(colMeans(AAA),type="h")
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[4,1,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
plot(colMeans(AAA),type="h")
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[5,1,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
plot(colMeans(AAA),type="h")
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[1,2,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
plot(colMeans(AAA),type="h")
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[2,2,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
plot(colMeans(AAA),type="h")
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[3,2,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
plot(colMeans(AAA),type="h")
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[4,2,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
plot(colMeans(AAA),type="h")
AAA[500:505,1:32]
aaa[500:505]
aaa=lapply(ModelFit$gamma,function(x) x[5,2,])
AAA=matrix(unlist(aaa),ncol=32,byrow=T)
plot(colMeans(AAA),type="h")
AAA[500:505,1:32]
aaa[500:505]
install.packages("Rcpp")
library(Rcpp)
Sys.getenv("PATH")
Sys.setenv(PATH = paste(Sys.getenv("PATH"),
"C:\\RTools40",
"C:\\RTools40\\mingw64\\bin",
sep = ";"))
install.pakcages("devtools")
install.packages("devtools")
install_github("s-jeong/bmsaplm")
library(devtools)
install_github("s-jeong/bmsaplm")
find_rtools(T)
Sys.getenv()['PATH']
Sys.getenv("PATH")
library(MSBS)
library(MSBS)
data(betacaro)
library(MSBS)
data(betacaro)
load("C:/Dropbox/Rpackages/MSBS/data/betacaro.Rdata")
library(MSBS)
data(betacaro)
data(betacaro)
data("betacaro)
data("betacaro")
data(betacaro)
library(MSBS)
data(betacaro)
betacaro
